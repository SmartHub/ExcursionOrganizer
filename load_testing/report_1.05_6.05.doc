Отчет о проделанной работе за неделю 1.05 - 6.05

Задание 1.
"сформулировать UseCase'ы посещения сайта и при помощи Apache Log получить логи посещения сайта"

UseCase'ы посещения:
1. Пользователь №1. 
Описание ситуации: Приехал в Петербург и плохо знает какие вообще есть достопримечательности в городе, но у него есть целый день и он хочет провести его в экскурсии. 
Действия на сайте: Зайдет на главную страницу, а с неё перейдет на один из готовых маршрутов.

2. Пользователь №2. 
Описание ситуации: Человек приехал в Петербург, но в отличии от Пользователя №1 сам любит устраивать свой день и интересуется тем, что он будет посещать. Готовые маршруты это не для него.
Действия на сайте: Пойдет в конструктор, откуда будет часто переходить на описания достопримечательностей. В конце концов составит маршрут из понравившегося ему и на вкладке "Маршрут" расставит всё по своим местам.

3. Пользователь №3.
Описание ситуации: Петербуржец. Хочет провести выходной с посещением совершенно конкретных и известных ему достопримечательностей.
Действия на сайте: Идет в конструктор и довольно быстро выбирает галочками то, что хочет посетить (описания достопримечательностей не смотрит). Возможно в "маршруте" корректирует порядок посещения.

С логами посещения сложнее. Саша сказал, что можно довольно легко прикрутить такое логирование,но пока его нет. Думаю это будет очень полезно.


Задание 2.
"на основе логов из п.1 сделать сценарий для JMeter и провести нагрузочное тестирование"

Так как логов пока не было, то пункт было затруднительно выполнить. Но вместо него опишу своб поездку в Яндекс на этой неделе, точнее основную мораль которую я вынес из встречи с людьми, занимающимися нагрузочным тестированием.

1. Самое важное пожалуй то, что надо применять принципиально другой подход, нежели я планировал изначально. Стоит тестировать не какие-то сценарии посещения (например, подобные описанным в Задании 1), а ОТДЕЛЬНЫЕ компоненты системы. Т.е. отдельно получить сколько запросов в секунду (важно, что тестируем именно кол-во запросов, а не пользователей) может выдержить вкладка маршруты, а сколько главная страница и т.д.
Во-первых, это позволяет независить от сценариев посещения, так как почти точно мы их не угадаем - пользователи пойдут своим путём. Во-вторых, при изменении части системы не придётся изменять все тесты, а только те, что отвечают за измененный компонент.

2. Второй важный момент, что стоит использовать не JMeter в чистом виде, а специальные плагины для него (которые в большинстве написаны сотрудниками Яндекса). Они лежат на google-code под названием jmeter-plugins

3. Важно отслеживать не только то, что выдает JMeter, но и состояние сервера - сколько CPU и памяти задействовано.

4. Стоит на всякий случай провести длительные тесты (часы-дни) на стабильной нагрузке (может и небольшой) - проверяет стабильность. Впрочем это более критично для С/С++ приложений, так как там бывает утечка памяти, а в Java такого нет.

5. Обязательно делать логирование посещений сайта (особенно если он будет открыт для всеообщего доступа) и постоянно отслеживать запас прочности. Желательно, чтобы запас был в 1,5 - 2 раза.
